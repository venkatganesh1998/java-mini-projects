# Java Concepts Required for Student Management System

## 1. Object-Oriented Programming (OOP)
The project follows OOP principles:

### a) Classes and Objects
- A **class** is a blueprint for creating objects.
- An **object** is an instance of a class.

Example:
```java
public class Student {
    private int id;
    private String name;
    private String email;

    public Student(int id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }
}
```

### b) Encapsulation
- Keeps data private and uses getter and setter methods.

Example:
```java
public class Student {
    private String email;

    public String getEmail() { 
        return email; 
    }

    public void setEmail(String email) { 
        this.email = email; 
    }
}
```

### c) Inheritance
- Allows a class to inherit properties from another class.

Example:
```java
public class User {
    protected int id;
    protected String name;
}

public class Student extends User {
    private String email;
}
```

### d) Polymorphism
- Method overloading example:

```java
public class StudentService {
    public void registerStudent(String name, String email) { }
    public void registerStudent(Student student) { }
}
```

---

## 2. Java Collections Framework (JCF)
- Used for storing and managing student data.

Example:
```java
List<Student> students = new ArrayList<>();
students.add(new Student(1, "John Doe", "john@example.com"));
```

---

## 3. Exception Handling
- Handles errors to prevent program crashes.

Example:
```java
public void registerStudent(Student student) {
    try {
        studentDAO.addStudent(student);
    } catch (SQLException e) {
        System.err.println("Error registering student: " + e.getMessage());
    }
}
```

---

## 4. JDBC (Java Database Connectivity)
- Connects Java applications to a database.

Example:
```java
public static Connection getConnection() throws SQLException {
    return DriverManager.getConnection(URL, USER, PASSWORD);
}
```

---

## 5. DAO Pattern (Data Access Object)
- Separates database logic from business logic.

Example:
```java
public void addStudent(Student student) throws SQLException {
    Connection conn = DatabaseConnection.getConnection();
    String query = "INSERT INTO students (name, email) VALUES (?, ?)";
    PreparedStatement stmt = conn.prepareStatement(query);
    stmt.setString(1, student.getName());
    stmt.setString(2, student.getEmail());
    stmt.executeUpdate();
}
```

---

## 6. Service Layer
- Contains business logic.

Example:
```java
public void registerStudent(Student student) {
    studentDAO.addStudent(student);
}
```

---

## 7. Java Main Method
- The entry point of the Java program.

Example:
```java
public class StudentManagementApp {
    public static void main(String[] args) {
        StudentService studentService = new StudentService();
        studentService.registerStudent(new Student(0, "John Doe", "john@example.com"));
    }
}
```

---

## 8. Packaging in Java
- Organizes the project into structured packages.

Example package declaration:
```java
package com.example.studentmanagement.model;
```

---

## 9. File Handling (if needed)
Example:
```java
File file = new File("students.txt");
Scanner scanner = new Scanner(file);
```

With these concepts, you can effectively build Java applications using OOP, JDBC, and proper structuring.
